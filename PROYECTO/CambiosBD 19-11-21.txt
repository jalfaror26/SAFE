create or replace PACKAGE PCKEMPRESA AS
  PROCEDURE paInsertar(TIPO_ID               VARCHAR2,
                       IDENTIFICACION        VARCHAR2,
                       NOMBRE                VARCHAR2,
                       DIRECCION             VARCHAR2,
                       TELEFONO              VARCHAR2,
                       CORREO                VARCHAR2,
                       imagen                blob,
                       pNo_cia               VARCHAR2,
                       pPAIS                 VARCHAR2,
                       pPROVINCIA            VARCHAR2,
                       pCANTON               VARCHAR2,
                       pDISTRITO             VARCHAR2,
                       pBARRIO               VARCHAR2,
                       Fe_Api_Token          VARCHAR2,
                       Fe_Access_Token       VARCHAR2,
                       Fe_ActividadComercial VARCHAR2,
                       Fe_Sucursal           VARCHAR2,
                       Fe_Caja               VARCHAR2);

  PROCEDURE paInsertarSinLogo(TIPO_ID               VARCHAR2,
                              IDENTIFICACION        VARCHAR2,
                              NOMBRE                VARCHAR2,
                              DIRECCION             VARCHAR2,
                              TELEFONO              VARCHAR2,
                              CORREO                VARCHAR2,
                              pNo_cia               VARCHAR2,
                              pPAIS                 VARCHAR2,
                              pPROVINCIA            VARCHAR2,
                              pCANTON               VARCHAR2,
                              pDISTRITO             VARCHAR2,
                              pBARRIO               VARCHAR2,
                              Fe_Api_Token          VARCHAR2,
                              Fe_Access_Token       VARCHAR2,
                              Fe_ActividadComercial VARCHAR2,
                              Fe_Sucursal           VARCHAR2,
                              Fe_Caja               VARCHAR2);

  PROCEDURE paActualizaParametro(pNo_cia    VARCHAR2,
                                 pParametro VARCHAR2,
                                 pValor     VARCHAR2);

END;

/

create or replace PACKAGE BODY PCKEMPRESA AS
  PROCEDURE paInsertar(TIPO_ID               VARCHAR2,
                       IDENTIFICACION        VARCHAR2,
                       NOMBRE                VARCHAR2,
                       DIRECCION             VARCHAR2,
                       TELEFONO              VARCHAR2,
                       CORREO                VARCHAR2,
                       imagen                blob,
                       pNo_cia               VARCHAR2,
                       pPAIS                 VARCHAR2,
                       pPROVINCIA            VARCHAR2,
                       pCANTON               VARCHAR2,
                       pDISTRITO             VARCHAR2,
                       pBARRIO               VARCHAR2,
                       Fe_Api_Token          VARCHAR2,
                       Fe_Access_Token       VARCHAR2,
                       Fe_ActividadComercial VARCHAR2,
                       Fe_Sucursal           VARCHAR2,
                       Fe_Caja               VARCHAR2,
                       Fe_Ind_Fact_Elect     VARCHAR2) IS
    cantidad NUMBER;
  
    vPaso varchar2(50);
  BEGIN
    --    DELETE FROM TBL_EMPRESA where no_cia = pNo_cia;
    vPaso := 'Trae Empresa';
    SELECT COUNT(*) INTO cantidad FROM TBL_EMPRESA where no_cia = pNo_cia;
  
    IF (cantidad > 0) THEN
      vPaso := 'Actualiza Empresa';
      UPDATE TBL_EMPRESA
         SET EMPR_TIPO_ID        = TIPO_ID,
             EMPR_IDENTIFICACION = IDENTIFICACION,
             EMPR_NOMBRE         = NOMBRE,
             EMPR_DIRECCION      = DIRECCION,
             EMPR_TELEFONO       = TELEFONO,
             EMPR_CORREO         = CORREO,
             empr_logo           = imagen,
             PAIS                = pPAIS,
             PROVINCIA           = pPROVINCIA,
             CANTON              = pCANTON,
             DISTRITO            = pDISTRITO,
             BARRIO              = pBARRIO,
             IND_FACT_ELECT      = Fe_Ind_Fact_Elect,
             API_TOKEN_WS_FE     = Fe_Api_Token,
             ACCESS_TOKEN_WS_FE  = Fe_Access_Token,
             CODIGO_ACTIVIDAD    = Fe_ActividadComercial,
             SUCURSAL            = Fe_Sucursal,
             CAJA                = Fe_Caja
       where no_cia = pNo_cia;
    ELSE
      vPaso := 'Inserta Empresa';
      INSERT INTO TBL_EMPRESA E
        (EMPR_TIPO_ID,
         EMPR_IDENTIFICACION,
         EMPR_NOMBRE,
         EMPR_DIRECCION,
         EMPR_TELEFONO,
         EMPR_CORREO,
         empr_logo,
         NO_CIA,
         PAIS,
         PROVINCIA,
         CANTON,
         DISTRITO,
         BARRIO,
         IND_FACT_ELECT,
         API_TOKEN_WS_FE,
         ACCESS_TOKEN_WS_FE,
         CODIGO_ACTIVIDAD,
         SUCURSAL,
         CAJA)
      VALUES
        (TIPO_ID,
         IDENTIFICACION,
         NOMBRE,
         DIRECCION,
         TELEFONO,
         CORREO,
         imagen,
         pNo_cia,
         pPAIS,
         pPROVINCIA,
         pCANTON,
         pDISTRITO,
         pBARRIO,
         Fe_Ind_Fact_Elect,
         Fe_Api_Token,
         Fe_Access_Token,
         Fe_ActividadComercial,
         Fe_Sucursal,
         Fe_Caja);
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar los datos, vuelva a intentarlo - ' ||
                              vPaso);
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'datos existente - ' || vPaso);
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar los datos ' ||
                              sqlerrm || ' - ' || vPaso);
  END paInsertar;
  ---------------------------------------------------------------------------------------

  PROCEDURE paInsertarSinLogo(TIPO_ID               VARCHAR2,
                              IDENTIFICACION        VARCHAR2,
                              NOMBRE                VARCHAR2,
                              DIRECCION             VARCHAR2,
                              TELEFONO              VARCHAR2,
                              CORREO                VARCHAR2,
                              pNo_cia               VARCHAR2,
                              pPAIS                 VARCHAR2,
                              pPROVINCIA            VARCHAR2,
                              pCANTON               VARCHAR2,
                              pDISTRITO             VARCHAR2,
                              pBARRIO               VARCHAR2,
                              Fe_Api_Token          VARCHAR2,
                              Fe_Access_Token       VARCHAR2,
                              Fe_ActividadComercial VARCHAR2,
                              Fe_Sucursal           VARCHAR2,
                              Fe_Caja               VARCHAR2,
                              Fe_Ind_Fact_Elect     VARCHAR2) IS
    cantidad NUMBER;
  BEGIN
    SELECT COUNT(*) INTO cantidad FROM TBL_EMPRESA where no_cia = pNo_cia;
  
    IF (cantidad > 0) THEN
      UPDATE TBL_EMPRESA E
         SET EMPR_TIPO_ID        = TIPO_ID,
             EMPR_IDENTIFICACION = IDENTIFICACION,
             EMPR_NOMBRE         = NOMBRE,
             EMPR_DIRECCION      = DIRECCION,
             EMPR_TELEFONO       = TELEFONO,
             EMPR_CORREO         = CORREO,
             PAIS                = pPAIS,
             PROVINCIA           = pPROVINCIA,
             CANTON              = pCANTON,
             DISTRITO            = pDISTRITO,
             BARRIO              = pBARRIO,
             IND_FACT_ELECT      = Fe_Ind_Fact_Elect,
             API_TOKEN_WS_FE     = Fe_Api_Token,
             ACCESS_TOKEN_WS_FE  = Fe_Access_Token,
             CODIGO_ACTIVIDAD    = Fe_ActividadComercial,
             SUCURSAL            = Fe_Sucursal,
             CAJA                = Fe_Caja
       where no_cia = pNo_cia;
    ELSE
      INSERT INTO TBL_EMPRESA
        (EMPR_TIPO_ID,
         EMPR_IDENTIFICACION,
         EMPR_NOMBRE,
         EMPR_DIRECCION,
         EMPR_TELEFONO,
         EMPR_CORREO,
         empr_logo,
         NO_CIA,
         PAIS,
         PROVINCIA,
         CANTON,
         DISTRITO,
         BARRIO,
         IND_FACT_ELECT,
         API_TOKEN_WS_FE,
         ACCESS_TOKEN_WS_FE,
         CODIGO_ACTIVIDAD,
         SUCURSAL,
         CAJA)
      VALUES
        (TIPO_ID,
         IDENTIFICACION,
         NOMBRE,
         DIRECCION,
         TELEFONO,
         CORREO,
         EMPTY_BLOB(),
         pNo_cia,
         pPAIS,
         pPROVINCIA,
         pCANTON,
         pDISTRITO,
         pBARRIO,
         Fe_Ind_Fact_Elect,
         Fe_Api_Token,
         Fe_Access_Token,
         Fe_ActividadComercial,
         Fe_Sucursal,
         Fe_Caja);
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar los datos, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'datos existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar los datos ' ||
                              sqlerrm);
  END paInsertarSinLogo;

  PROCEDURE paActualizaParametro(pNo_cia    VARCHAR2,
                                 pParametro VARCHAR2,
                                 pValor     VARCHAR2) IS
  BEGIN
    case
      when pParametro = 'BUSCATC' THEN
        UPDATE TBL_EMPRESA E SET buscatc = pValor where no_cia = pNo_cia;
      
      when pParametro = 'IND_FACTURASABIERTAS' THEN
        UPDATE TBL_EMPRESA E
           SET IND_FACTURASABIERTAS = pValor
         where no_cia = pNo_cia;
      
    END CASE;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar los datos, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'datos existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar los datos ' ||
                              sqlerrm);
  END paActualizaParametro;
END;


/

