ALTER TABLE TBL_FACTURA 
ADD (FAC_TIPOPAGO VARCHAR2(20) );

ALTER TABLE TBL_EMPRESA RENAME COLUMN USUARIO_WS_FE TO API_TOKEN_WS_FE;

ALTER TABLE TBL_EMPRESA RENAME COLUMN CLAVE_WS_FE TO ACCESS_TOKEN_WS_FE;

ALTER TABLE TBL_EMPRESA  
MODIFY (API_TOKEN_WS_FE VARCHAR2(300 BYTE) );

ALTER TABLE TBL_EMPRESA  
MODIFY (ACCESS_TOKEN_WS_FE VARCHAR2(300 BYTE) );

/

create or replace NONEDITIONABLE TRIGGER TR_EMPRESA_BIT
  BEFORE INSERT OR DELETE OR UPDATE ON TBL_EMPRESA
  FOR EACH ROW

BEGIN
  IF deleting THEN
    INSERT INTO TBL_BITACORA
      (USUARIO_DUENO,
       TABLA,
       MOVIMIENTO,
       USUARIO,
       FECHA,
       LLAVE,
       VALORES,
       NO_CIA,
       NOMBRE_TABLA,
       TIPO_TABLA)
    VALUES
      ('SAFE',
       'TBL_EMPRESA',
       'DELETE',
       user,
       sysdate,
       'NO_CIA = ' || :OLD.NO_CIA || ' --> ' || '<eol>',
       'EMPR_TIPO_ID = ' || :OLD.EMPR_TIPO_ID || ' --> ' || 
       'EMPR_IDENTIFICACION = ' || :OLD.EMPR_IDENTIFICACION || ' --> ' || 
       'EMPR_NOMBRE = ' || :OLD.EMPR_NOMBRE || ' --> ' || 
       'EMPR_DIRECCION = ' || :OLD.EMPR_DIRECCION || ' --> ' || 
       'EMPR_TELEFONO = ' || :OLD.EMPR_TELEFONO || ' --> ' || 
       'EMPR_CORREO = ' || :OLD.EMPR_CORREO || ' --> ' || 
       'IND_FACTURASABIERTAS = ' || :OLD.IND_FACTURASABIERTAS || ' --> ' || 
       'RUTAARCHIVOBACKUP = ' || :OLD.RUTAARCHIVOBACKUP || ' --> ' || 
       'BUSCATC = ' || :OLD.BUSCATC || ' --> ' || 
       'IND_REDONDEARPRECIOVENTA = ' || :OLD.IND_REDONDEARPRECIOVENTA || ' --> ' || 
       'IND_IMPRIMETIQUETALFACTURAR = ' || :OLD.IND_IMPRIMETIQUETALFACTURAR || ' --> ' || 
       'PAIS = ' || :OLD.PAIS || ' --> ' || 
       'PROVINCIA = ' || :OLD.PROVINCIA || ' --> ' || 
       'CANTON = ' || :OLD.CANTON || ' --> ' || 
       'DISTRITO = ' || :OLD.DISTRITO || ' --> ' || 
       'BARRIO = ' || :OLD.BARRIO || ' --> ' || 
       'IND_FACT_ELECT = ' || :OLD.IND_FACT_ELECT || ' --> ' || 
       'VERSION_FE = ' || :OLD.VERSION_FE || ' --> ' || 
       'APROBACION_DGT_FE = ' || :OLD.APROBACION_DGT_FE || ' --> ' || 
       'EMAIL_FE = ' || :OLD.EMAIL_FE || ' --> ' || 
       'FECHA_RESOL_FE = ' || :OLD.FECHA_RESOL_FE || ' --> ' || 
       'API_TOKEN_WS_FE = ' || :OLD.API_TOKEN_WS_FE || ' --> ' || 
       'ACCESS_TOKEN_WS_FE = ' || :OLD.ACCESS_TOKEN_WS_FE || ' --> ' || 
       'IND_USA_WS_FE = ' || :OLD.IND_USA_WS_FE || ' --> ' || 
       'SECUENCIAS_URL_WS_FE = ' || :OLD.SECUENCIAS_URL_WS_FE || ' --> ' || 
       'CODIGO_ACTIVIDAD = ' || :OLD.CODIGO_ACTIVIDAD || ' --> ' || 
       'LEYENDA_FISCAL = ' || :OLD.LEYENDA_FISCAL || ' --> ' || 
       'IND_IMPRIME_IMP_INCL = ' || :OLD.IND_IMPRIME_IMP_INCL || ' --> ' || 
       'LEYENDA_EXONERACION = ' || :OLD.LEYENDA_EXONERACION || ' --> ' || 
       'TIPO_NC_REC = ' || :OLD.TIPO_NC_REC || ' --> ' || 
       '<eol>',
       :new.NO_CIA,
       'DATOS EMPRESA',
       'MANTENIMIENTOS');
  ELSIF inserting THEN
    INSERT INTO TBL_BITACORA
      (USUARIO_DUENO,
       TABLA,
       MOVIMIENTO,
       USUARIO,
       FECHA,
       LLAVE,
       VALORES,
       NO_CIA,
       NOMBRE_TABLA,
       TIPO_TABLA)
    VALUES
      ('SAFE',
       'TBL_EMPRESA',
       'INSERT',
       user,
       sysdate,
       'NO_CIA = ' || :new.NO_CIA || ' --> ' || '<eol>',
       'EMPR_TIPO_ID = ' || :new.EMPR_TIPO_ID || ' --> ' || 
       'EMPR_IDENTIFICACION = ' || :new.EMPR_IDENTIFICACION || ' --> ' || 
       'EMPR_NOMBRE = ' || :new.EMPR_NOMBRE || ' --> ' || 
       'EMPR_DIRECCION = ' || :new.EMPR_DIRECCION || ' --> ' || 
       'EMPR_TELEFONO = ' || :new.EMPR_TELEFONO || ' --> ' || 
       'EMPR_CORREO = ' || :new.EMPR_CORREO || ' --> ' || 
       'IND_FACTURASABIERTAS = ' || :new.IND_FACTURASABIERTAS || ' --> ' ||        
       'RUTAARCHIVOBACKUP = ' || :new.RUTAARCHIVOBACKUP || ' --> ' || 
       'BUSCATC = ' || :new.BUSCATC || ' --> ' || 
       'IND_REDONDEARPRECIOVENTA = ' || :new.IND_REDONDEARPRECIOVENTA || ' --> ' || 
       'IND_IMPRIMETIQUETALFACTURAR = ' || :new.IND_IMPRIMETIQUETALFACTURAR || ' --> ' || 
       'PAIS = ' || :new.PAIS || ' --> ' || 
       'PROVINCIA = ' || :new.PROVINCIA || ' --> ' || 
       'CANTON = ' || :new.CANTON || ' --> ' || 
       'DISTRITO = ' || :new.DISTRITO || ' --> ' || 
       'PAIS = ' || :new.PAIS || ' --> ' || 
       'BARRIO = ' || :new.BARRIO || ' --> ' || 
       'IND_FACT_ELECT = ' || :new.IND_FACT_ELECT || ' --> ' || 
       'VERSION_FE = ' || :new.VERSION_FE || ' --> ' || 
       'APROBACION_DGT_FE = ' || :new.APROBACION_DGT_FE || ' --> ' || 
       'EMAIL_FE = ' || :new.EMAIL_FE || ' --> ' || 
       'FECHA_RESOL_FE = ' || :new.FECHA_RESOL_FE || ' --> ' || 
       'API_TOKEN_WS_FE = ' || :new.API_TOKEN_WS_FE || ' --> ' || 
       'ACCESS_TOKEN_WS_FE = ' || :new.ACCESS_TOKEN_WS_FE || ' --> ' || 
       'IND_USA_WS_FE = ' || :new.IND_USA_WS_FE || ' --> ' || 
       'SECUENCIAS_URL_WS_FE = ' || :new.SECUENCIAS_URL_WS_FE || ' --> ' || 
       'CODIGO_ACTIVIDAD = ' || :new.CODIGO_ACTIVIDAD || ' --> ' || 
       'LEYENDA_FISCAL = ' || :new.LEYENDA_FISCAL || ' --> ' || 
       'IND_IMPRIME_IMP_INCL = ' || :new.IND_IMPRIME_IMP_INCL || ' --> ' || 
       'LEYENDA_EXONERACION = ' || :new.LEYENDA_EXONERACION || ' --> ' || 
       'TIPO_NC_REC = ' || :new.TIPO_NC_REC || ' --> ' || 
       '<eol>',
       :new.NO_CIA,
       'DATOS EMPRESA',
       'MANTENIMIENTOS');
  ELSIF updating THEN
    INSERT INTO TBL_BITACORA
      (USUARIO_DUENO,
       TABLA,
       MOVIMIENTO,
       USUARIO,
       FECHA,
       LLAVE,
       VALORES,
       NO_CIA,
       NOMBRE_TABLA,
       TIPO_TABLA)
    VALUES
      ('SAFE',
       'TBL_EMPRESA',
       'UPDATE',
       user,
       sysdate,
       'NO_CIA = ' || :new.NO_CIA || ' --> ' || '<eol>',
       'EMPR_TIPO_ID = ' || :new.EMPR_TIPO_ID || ' --> ' || 
       'EMPR_IDENTIFICACION = ' || :new.EMPR_IDENTIFICACION || ' --> ' || 
       'EMPR_NOMBRE = ' || :new.EMPR_NOMBRE || ' --> ' || 
       'EMPR_DIRECCION = ' || :new.EMPR_DIRECCION || ' --> ' || 
       'EMPR_TELEFONO = ' || :new.EMPR_TELEFONO || ' --> ' || 
       'EMPR_CORREO = ' || :new.EMPR_CORREO || ' --> ' || 
       'IND_FACTURASABIERTAS = ' || :new.IND_FACTURASABIERTAS || ' --> ' ||        
       'RUTAARCHIVOBACKUP = ' || :new.RUTAARCHIVOBACKUP || ' --> ' || 
       'BUSCATC = ' || :new.BUSCATC || ' --> ' || 
       'IND_REDONDEARPRECIOVENTA = ' || :new.IND_REDONDEARPRECIOVENTA || ' --> ' || 
       'IND_IMPRIMETIQUETALFACTURAR = ' || :new.IND_IMPRIMETIQUETALFACTURAR || ' --> ' || 
       'PAIS = ' || :new.PAIS || ' --> ' || 
       'PROVINCIA = ' || :new.PROVINCIA || ' --> ' || 
       'CANTON = ' || :new.CANTON || ' --> ' || 
       'DISTRITO = ' || :new.DISTRITO || ' --> ' || 
       'PAIS = ' || :new.PAIS || ' --> ' || 
       'BARRIO = ' || :new.BARRIO || ' --> ' || 
       'IND_FACT_ELECT = ' || :new.IND_FACT_ELECT || ' --> ' || 
       'VERSION_FE = ' || :new.VERSION_FE || ' --> ' || 
       'APROBACION_DGT_FE = ' || :new.APROBACION_DGT_FE || ' --> ' || 
       'EMAIL_FE = ' || :new.EMAIL_FE || ' --> ' || 
       'FECHA_RESOL_FE = ' || :new.FECHA_RESOL_FE || ' --> ' || 
       'API_TOKEN_WS_FE = ' || :new.API_TOKEN_WS_FE || ' --> ' || 
       'ACCESS_TOKEN_WS_FE = ' || :new.ACCESS_TOKEN_WS_FE || ' --> ' || 
       'IND_USA_WS_FE = ' || :new.IND_USA_WS_FE || ' --> ' || 
       'SECUENCIAS_URL_WS_FE = ' || :new.SECUENCIAS_URL_WS_FE || ' --> ' || 
       'CODIGO_ACTIVIDAD = ' || :new.CODIGO_ACTIVIDAD || ' --> ' || 
       'LEYENDA_FISCAL = ' || :new.LEYENDA_FISCAL || ' --> ' || 
       'IND_IMPRIME_IMP_INCL = ' || :new.IND_IMPRIME_IMP_INCL || ' --> ' || 
       'LEYENDA_EXONERACION = ' || :new.LEYENDA_EXONERACION || ' --> ' || 
       'TIPO_NC_REC = ' || :new.TIPO_NC_REC || ' --> ' || 
       '<eol>',
       :new.NO_CIA,
       'DATOS EMPRESA',
       'MANTENIMIENTOS');
  END IF;
END;

/

ALTER TABLE TBL_FACTURA 
ADD (FAC_CREA_FE VARCHAR2(1) );

ALTER TABLE TBL_FACTURA 
ADD (FE_CODIGO VARCHAR2(20) );

ALTER TABLE TBL_FACTURA 
ADD (FE_CONTENIDOXML CLOB );

ALTER TABLE TBL_FACTURA 
ADD (FE_CONTENIDOXMLFIRMADO CLOB );

ALTER TABLE TBL_FACTURA 
ADD (FE_ERRORES CLOB );

ALTER TABLE TBL_FACTURA 
ADD (FE_CLAVE VARCHAR2(200) );

ALTER TABLE TBL_FACTURA 
ADD (FE_CONSECUTIVO VARCHAR2(200) );

ALTER TABLE TBL_FACTURA 
ADD (FE_RECEPCION VARCHAR2(50) );

ALTER TABLE TBL_FACTURA 
ADD (FE_COMPROBACION VARCHAR2(50) );

/

create or replace NONEDITIONABLE PACKAGE BODY PCKCLIENTE AS
  PROCEDURE paInsertar(cliid          VARCHAR2,
                       tipoId         VARCHAR2,
                       nombre         VARCHAR2,
                       telefono       VARCHAR2,
                       fax            VARCHAR2,
                       contacto       VARCHAR2,
                       correo         VARCHAR2,
                       ubicacion      VARCHAR2,
                       dias           NUMBER,
                       almacen        NUMBER,
                       descAlmacen    VARCHAR2,
                       INDICE         NUMBER,
                       identificacion VARCHAR2,
                       LC_moneda      VARCHAR2,
                       LC_limite      NUMBER,
                       pNo_cia        VARCHAR2,
                       pPAIS          VARCHAR2,
                       pPROVINCIA     VARCHAR2,
                       pCANTON        VARCHAR2,
                       pDISTRITO      VARCHAR2,
                       pBARRIO        VARCHAR2,
                       linea          OUT NUMBER) IS
  
    vTipoID varchar2(1);
  
    cursor c_tipo_id is
      select CODIGO
        from TBL_TIPOS_ID
       where CODIGO = tipoId
          or EQUIV_ID_FE = tipoId;
  
  BEGIN
  
    open c_tipo_id;
    fetch c_tipo_id
      into vTipoID;
    close c_tipo_id;
  
    UPDATE TBL_CLIENTES
       SET Cli_Tipo_ID        = nvl(vTipoID, tipoId),
           Cli_Nombre         = Nombre,
           Cli_Telefono       = telefono,
           Cli_Fax            = fax,
           Cli_Contacto       = contacto,
           Cli_Correo         = correo,
           Cli_Ubicacion      = ubicacion,
           CLI_DIAS           = DIAS,
           CLI_ESTADO         = 1,
           CLI_IDENTIFICACION = identificacion,
           cli_lc_limite      = LC_limite,
           cli_lc_moneda      = LC_moneda,
           PAIS               = pPAIS,
           PROVINCIA          = pPROVINCIA,
           CANTON             = pCANTON,
           DISTRITO           = pDISTRITO,
           BARRIO             = pBARRIO
     WHERE No_cia = pNo_cia
       AND ((Cli_linea = indice and indice !=0) or (CLI_IDENTIFICACION = identificacion and indice = 0));
  
    linea := indice;
  
    if (sql%rowcount = 0) then
    
      INSERT INTO TBL_CLIENTES
        (CLI_LINEA,
         CLI_ID,
         CLI_TIPO_ID,
         CLI_NOMBRE,
         CLI_TELEFONO,
         CLI_FAX,
         CLI_CONTACTO,
         CLI_CORREO,
         CLI_UBICACION,
         CLI_ESTADO,
         CLI_DIAS,
         CLI_IDENTIFICACION,
         CLI_TIPOCLIENTE,
         CLI_LC_MONEDA,
         cli_lc_limite,
         No_cia,
         PAIS,
         PROVINCIA,
         CANTON,
         DISTRITO,
         BARRIO)
      VALUES
        (sCliente.nextval,
         cliid,
         nvl(vTipoID, tipoId),
         nombre,
         telefono,
         fax,
         contacto,
         correo,
         ubicacion,
         1,
         dias,
         identificacion,
         'CLIENTE',
         LC_moneda,
         LC_limite,
         pNo_cia,
         pPAIS,
         pPROVINCIA,
         pCANTON,
         pDISTRITO,
         pBARRIO);
    
      SELECT sCliente.currval INTO linea FROM dual;
    
    END IF;
  
    COMMIT;
  
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar el cliente, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'Cliente existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar el cliente ' ||
                              sqlerrm);
  END paInsertar;
  ----------------------------------------------------------------------------------
  PROCEDURE paModificar(cliid          VARCHAR2,
                        tipoId         VARCHAR2,
                        nombre         VARCHAR2,
                        telefono       VARCHAR2,
                        fax            VARCHAR2,
                        contacto       VARCHAR2,
                        correo         VARCHAR2,
                        ubicacion      VARCHAR2,
                        dias           NUMBER,
                        almacen        NUMBER,
                        descAlmacen    VARCHAR2,
                        INDICE         NUMBER,
                        identificacion VARCHAR2,
                        LC_moneda      VARCHAR2,
                        LC_limite      NUMBER,
                        pNo_cia        VARCHAR2,
                        pPAIS          VARCHAR2,
                        pPROVINCIA     VARCHAR2,
                        pCANTON        VARCHAR2,
                        pDISTRITO      VARCHAR2,
                        pBARRIO        VARCHAR2) IS
  
    vTipoID varchar2(1);
  
    cursor c_tipo_id is
      select CODIGO
        from TBL_TIPOS_ID
       where CODIGO = tipoId
          or EQUIV_ID_FE = tipoId;
  
  BEGIN
  
    open c_tipo_id;
    fetch c_tipo_id
      into vTipoID;
    close c_tipo_id;
  
    UPDATE TBL_CLIENTES
       SET Cli_Id             = CliId,
           Cli_Tipo_ID        = nvl(vTipoID, tipoId),
           Cli_Nombre         = Nombre,
           Cli_Telefono       = telefono,
           Cli_Fax            = fax,
           Cli_Contacto       = contacto,
           Cli_Correo         = correo,
           Cli_Ubicacion      = ubicacion,
           CLI_DIAS           = DIAS,
           CLI_IDENTIFICACION = IDENTIFICACION,
           cli_lc_limite      = LC_limite,
           cli_lc_moneda      = LC_moneda,
           PAIS               = pPAIS,
           PROVINCIA          = pPROVINCIA,
           CANTON             = pCANTON,
           DISTRITO           = pDISTRITO,
           BARRIO             = pBARRIO
     WHERE No_cia = pNo_cia
       and cli_linea = indice
       AND CLI_ESTADO = 1;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al modificar el cliente, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al modificar el cliente ' ||
                              sqlerrm);
  END paModificar;
  ---------------------------------------------------------------------------

  PROCEDURE paEliminar(INDICE NUMBER, pNo_cia VARCHAR2) IS
  BEGIN
  
    UPDATE TBL_CLIENTES
       SET CLI_ESTADO = 0
     WHERE No_cia = pNo_cia
       and CLI_LINEA = INDICE;
  
    COMMIT;
  
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al borrar el cliente, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al eliminar el cliente ' ||
                              sqlerrm);
  END paEliminar;
  ----------------------------------------------------------------------------
END;

/

create or replace PACKAGE PCKFACTURA AS
  PROCEDURE paInsertar(factura         VARCHAR2,
                       fechafac        DATE,
                       cliente         VARCHAR2,
                       nombre          VARCHAR2,
                       telefono        VARCHAR2,
                       ubicacion       VARCHAR2,
                       tipoCredito     VARCHAR2,
                       moneda          VARCHAR2,
                       tipocambio      NUMBER,
                       exento          NUMBER,
                       subtotal        NUMBER,
                       impuesto        NUMBER,
                       descuento       NUMBER,
                       total           NUMBER,
                       saldo           NUMBER,
                       estado          VARCHAR2,
                       observacion     VARCHAR2,
                       ADELANTO        NUMBER,
                       FORMAPAGO       VARCHAR2,
                       TIPO            VARCHAR2,
                       INDICEDOCUMENTO NUMBER,
                       tIPODOCUMENTO   VARCHAR2,
                       diasCredito     NUMBER,
                       pNo_cia         VARCHAR2,
                       pSalida         OUT pckAdministrativo.admincursor);

  PROCEDURE paModificar(indice       NUMBER,
                        factura      VARCHAR2,
                        fechafac     DATE,
                        cliente      VARCHAR2,
                        nombre       VARCHAR2,
                        telefono     VARCHAR2,
                        ubicacion    VARCHAR2,
                        tipoCredito  VARCHAR2,
                        moneda       VARCHAR2,
                        tipocambio   NUMBER,
                        exento       NUMBER,
                        subtotal     NUMBER,
                        impuesto     NUMBER,
                        descuento    NUMBER,
                        total        NUMBER,
                        saldo        NUMBER,
                        estado       VARCHAR2,
                        observacion  VARCHAR2,
                        adelanto     NUMBER,
                        FORMAPAGO    VARCHAR2,
                        TIPO         VARCHAR2,
                        pordescuento NUMBER,
                        diasCredito  NUMBER,
                        Tipopago     VARCHAR2,
                        pNo_cia      VARCHAR2);
END;

/

create or replace NONEDITIONABLE PACKAGE BODY PCKFACTURA AS
  PROCEDURE paInsertar(factura         VARCHAR2,
                       fechafac        DATE,
                       cliente         VARCHAR2,
                       nombre          VARCHAR2,
                       telefono        VARCHAR2,
                       ubicacion       VARCHAR2,
                       tipoCredito     VARCHAR2,
                       moneda          VARCHAR2,
                       tipocambio      NUMBER,
                       exento          NUMBER,
                       subtotal        NUMBER,
                       impuesto        NUMBER,
                       descuento       NUMBER,
                       total           NUMBER,
                       saldo           NUMBER,
                       estado          VARCHAR2,
                       observacion     VARCHAR2,
                       ADELANTO        NUMBER,
                       FORMAPAGO       VARCHAR2,
                       TIPO            VARCHAR2,
                       INDICEDOCUMENTO NUMBER,
                       tIPODOCUMENTO   VARCHAR2,
                       diasCredito     NUMBER,
                       pNo_cia         VARCHAR2,
                       pSalida         OUT pckAdministrativo.admincursor) IS
    val    NUMBER;
    numero VARCHAR2(10);
  BEGIN
  
    SELECT COUNT(*) INTO val FROM TBL_FACTURA where No_cia = pNo_cia;
  
    IF (val = 0) THEN
      numero := factura;
    ELSE
      SELECT MAX(fac_numero + 1)
        INTO numero
        FROM TBL_FACTURA
       where No_cia = pNo_cia;
    END IF;
  
    INSERT INTO TBL_FACTURA
      (fac_linea,
       fac_numero,
       fac_fecha,
       fac_cliente,
       fac_nombre,
       fac_telefono,
       fac_ubicacion,
       fac_tipo_credito,
       fac_moneda,
       fac_tipo_cambio,
       fac_excento,
       fac_subtotal,
       fac_impuesto,
       fac_descuento,
       fac_total,
       fac_saldo,
       fac_estado,
       fac_observacion,
       fac_usuariocrea,
       FAC_FECHACREA,
       FAC_ADELANTO,
       FAC_FORMAPAGO,
       FAC_TIPO,
       FAC_VENDEDOR,
       FAC_INDICEDOCUMENTO,
       FAC_TIPODOCUMENTO,
       fac_pordescuento,
       FAC_DIAS_CREDITO,
       No_cia)
    VALUES
      (SFACTURA.Nextval,
       numero,
       fechafac,
       cliente,
       nombre,
       telefono,
       ubicacion,
       tipoCredito,
       moneda,
       tipocambio,
       exento,
       subtotal,
       impuesto,
       descuento,
       total,
       saldo,
       estado,
       observacion,
       user,
       sysdate,
       ADELANTO,
       FORMAPAGO,
       TIPO,
       user,
       INDICEDOCUMENTO,
       TIPODOCUMENTO,
       0,
       diasCredito,
       pNo_cia);
  
    OPEN pSalida FOR
      SELECT numero, SFACTURA.Currval FROM dual;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar la fatura, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'Factura ya existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar la factura ' ||
                              sqlerrm);
  END paInsertar;
  ----------------------------------------------------------------------------------
  PROCEDURE paModificar(indice       NUMBER,
                        factura      VARCHAR2,
                        fechafac     DATE,
                        cliente      VARCHAR2,
                        nombre       VARCHAR2,
                        telefono     VARCHAR2,
                        ubicacion    VARCHAR2,
                        tipoCredito  VARCHAR2,
                        moneda       VARCHAR2,
                        tipocambio   NUMBER,
                        exento       NUMBER,
                        subtotal     NUMBER,
                        impuesto     NUMBER,
                        descuento    NUMBER,
                        total        NUMBER,
                        saldo        NUMBER,
                        estado       VARCHAR2,
                        observacion  VARCHAR2,
                        adelanto     NUMBER,
                        FORMAPAGO    VARCHAR2,
                        TIPO         VARCHAR2,
                        pordescuento NUMBER,
                        diasCredito  NUMBER,
                        Tipopago     VARCHAR2,
                        pNo_cia      VARCHAR2) IS
  BEGIN
    UPDATE TBL_FACTURA
       SET fac_fecha           = fechafac,
           fac_cliente         = cliente,
           fac_nombre          = nombre,
           fac_telefono        = telefono,
           fac_ubicacion       = ubicacion,
           fac_tipo_credito    = tipoCredito,
           fac_moneda          = moneda,
           fac_tipo_cambio     = tipocambio,
           fac_excento         = exento,
           fac_subtotal        = subtotal,
           fac_impuesto        = impuesto,
           fac_descuento       = descuento,
           fac_total           = total,
           fac_saldo           = saldo,
           fac_estado          = estado,
           fac_observacion     = observacion,
           FAC_USUARIOMODIFICA = user,
           FAC_FECHAMODIFICA   = sysdate,
           FAC_ADELANTO        = ADELANTO,
           FAC_FORMAPAGO       = FORMAPAGO,
           FAC_TIPO            = tipo,
           FAC_VENDEDOR        = user,
           fac_pordescuento    = pordescuento,
           FAC_DIAS_CREDITO    = diasCredito,
           fac_tipopago        = Tipopago
     WHERE No_cia = pNo_cia
       and fac_linea = indice
       AND fac_numero = factura;
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al modificar la factura, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al modificar la factura ' ||
                              sqlerrm);
  END paModificar;
  ---------------------------------------------------------------------------

END;

/

