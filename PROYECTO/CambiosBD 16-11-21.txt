create or replace PACKAGE BODY PCKCLIENTE AS
  PROCEDURE paInsertar(cliid          VARCHAR2,
                       tipoId         VARCHAR2,
                       nombre         VARCHAR2,
                       telefono       VARCHAR2,
                       fax            VARCHAR2,
                       contacto       VARCHAR2,
                       correo         VARCHAR2,
                       ubicacion      VARCHAR2,
                       dias           NUMBER,
                       almacen        NUMBER,
                       descAlmacen    VARCHAR2,
                       INDICE         NUMBER,
                       identificacion VARCHAR2,
                       LC_moneda      VARCHAR2,
                       LC_limite      NUMBER,
                       pNo_cia        VARCHAR2,
                       pPAIS          VARCHAR2,
                       pPROVINCIA     VARCHAR2,
                       pCANTON        VARCHAR2,
                       pDISTRITO      VARCHAR2,
                       pBARRIO        VARCHAR2,
                       linea          OUT NUMBER) IS
  
    vTipoID varchar2(1);
  
    cursor c_tipo_id is
      select CODIGO
        from TBL_TIPOS_ID
       where CODIGO = tipoId
          or EQUIV_ID_FE = tipoId;
  
  BEGIN
  
    open c_tipo_id;
    fetch c_tipo_id
      into vTipoID;
    close c_tipo_id;
  
    UPDATE TBL_CLIENTES
       SET Cli_Tipo_ID        = nvl(vTipoID, tipoId),
           Cli_Nombre         = Nombre,
           Cli_Telefono       = telefono,
           Cli_Fax            = fax,
           Cli_Contacto       = contacto,
           Cli_Correo         = correo,
           Cli_Ubicacion      = ubicacion,
           CLI_DIAS           = DIAS,
           CLI_ESTADO         = 1,
           CLI_IDENTIFICACION = identificacion,
           cli_lc_limite      = LC_limite,
           cli_lc_moneda      = LC_moneda,
           PAIS               = pPAIS,
           PROVINCIA          = pPROVINCIA,
           CANTON             = pCANTON,
           DISTRITO           = pDISTRITO,
           BARRIO             = pBARRIO
     WHERE No_cia = pNo_cia
       and Cli_Id = CliId
       AND Cli_linea = indice;
  
    linea := indice;
  
    if (sql%rowcount = 0) then
    
      INSERT INTO TBL_CLIENTES
        (CLI_LINEA,
         CLI_ID,
         CLI_TIPO_ID,
         CLI_NOMBRE,
         CLI_TELEFONO,
         CLI_FAX,
         CLI_CONTACTO,
         CLI_CORREO,
         CLI_UBICACION,
         CLI_ESTADO,
         CLI_DIAS,
         CLI_IDENTIFICACION,
         CLI_TIPOCLIENTE,
         CLI_LC_MONEDA,
         cli_lc_limite,
         No_cia,
         PAIS,
         PROVINCIA,
         CANTON,
         DISTRITO,
         BARRIO)
      VALUES
        (sCliente.nextval,
         cliid,
         nvl(vTipoID, tipoId),
         nombre,
         telefono,
         fax,
         contacto,
         correo,
         ubicacion,
         1,
         dias,
         identificacion,
         'CLIENTE',
         LC_moneda,
         LC_limite,
         pNo_cia,
         pPAIS,
         pPROVINCIA,
         pCANTON,
         pDISTRITO,
         pBARRIO);
    
      SELECT sCliente.currval INTO linea FROM dual;
    
    END IF;
  
    COMMIT;
  
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar el cliente, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'Cliente existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar el cliente ' ||
                              sqlerrm);
  END paInsertar;
  ----------------------------------------------------------------------------------
  PROCEDURE paModificar(cliid          VARCHAR2,
                        tipoId         VARCHAR2,
                        nombre         VARCHAR2,
                        telefono       VARCHAR2,
                        fax            VARCHAR2,
                        contacto       VARCHAR2,
                        correo         VARCHAR2,
                        ubicacion      VARCHAR2,
                        dias           NUMBER,
                        almacen        NUMBER,
                        descAlmacen    VARCHAR2,
                        INDICE         NUMBER,
                        identificacion VARCHAR2,
                        LC_moneda      VARCHAR2,
                        LC_limite      NUMBER,
                        pNo_cia        VARCHAR2,
                        pPAIS          VARCHAR2,
                        pPROVINCIA     VARCHAR2,
                        pCANTON        VARCHAR2,
                        pDISTRITO      VARCHAR2,
                        pBARRIO        VARCHAR2) IS
  
    vTipoID varchar2(1);
  
    cursor c_tipo_id is
      select CODIGO
        from TBL_TIPOS_ID
       where CODIGO = tipoId
          or EQUIV_ID_FE = tipoId;
  
  BEGIN
  
    open c_tipo_id;
    fetch c_tipo_id
      into vTipoID;
    close c_tipo_id;
  
    UPDATE TBL_CLIENTES
       SET Cli_Id             = CliId,
           Cli_Tipo_ID        = nvl(vTipoID, tipoId),
           Cli_Nombre         = Nombre,
           Cli_Telefono       = telefono,
           Cli_Fax            = fax,
           Cli_Contacto       = contacto,
           Cli_Correo         = correo,
           Cli_Ubicacion      = ubicacion,
           CLI_DIAS           = DIAS,
           CLI_IDENTIFICACION = IDENTIFICACION,
           cli_lc_limite      = LC_limite,
           cli_lc_moneda      = LC_moneda,
           PAIS               = pPAIS,
           PROVINCIA          = pPROVINCIA,
           CANTON             = pCANTON,
           DISTRITO           = pDISTRITO,
           BARRIO             = pBARRIO
     WHERE No_cia = pNo_cia
       and cli_linea = indice
       AND CLI_ESTADO = 1;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al modificar el cliente, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al modificar el cliente ' ||
                              sqlerrm);
  END paModificar;
  ---------------------------------------------------------------------------

  PROCEDURE paEliminar(INDICE NUMBER, pNo_cia VARCHAR2) IS
  BEGIN
  
    UPDATE TBL_CLIENTES
       SET CLI_ESTADO = 0
     WHERE No_cia = pNo_cia
       and CLI_LINEA = INDICE;
  
    COMMIT;
  
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al borrar el cliente, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al eliminar el cliente ' ||
                              sqlerrm);
  END paEliminar;
  ----------------------------------------------------------------------------
END;


/

ALTER TABLE TBL_CLIENTES 
DROP CONSTRAINT TBL_CLIENTES_FK6;

/

create or replace NONEDITIONABLE PACKAGE BODY PCKSERVICIO AS
  PROCEDURE paInsertar(tipo        VARCHAR2,
                       codigo      VARCHAR2,
                       desBreve    VARCHAR2,
                       nombre      VARCHAR2,
                       impuestos   NUMBER,
                       indice      NUMBER,
                       tipo_codigo VARCHAR2,
                       venta_IVI   VARCHAR2,
                       pNo_cia     VARCHAR2,
                       pCod_cabys  VARCHAR2,
                       linea       OUT NUMBER) IS
    vCodigo VARCHAR2(100);
  
    existe boolean;
    dummy  varchar2(1);
  
    error exception;
    msg_error varchar2(1000);
  
    vCostoVenta         number;
    vMontoImpuestoVenta number;
    vMontoUtilidad      number;
    vSubTotalVenta      number;
    vPrecioVenta        number;
  
  BEGIN

      UPDATE tbl_servicios
         SET SER_DESC_BREVE  = desBreve,
             SER_Nombre      = nvl(nombre,desBreve),
             SER_impuestos   = impuestos,
             SER_codigo      = codigo,
             SER_tipo_codigo = tipo_codigo,
             SER_VENTA_IVI   = venta_IVI,
             cod_cabys       = pCod_cabys,
             SER_ESTADO      = 1
       WHERE no_Cia = pNo_cia
         AND ((SER_INDICE = indice and indice !=0) or (indice = 0 and SER_codigo = codigo));
         
      linea := indice;

     if (sql%rowcount = 0) then
      SELECT SSERVICIO.nextval INTO linea FROM dual;
    
      IF tipo_codigo = 'IN' THEN
        vCodigo := linea;
      ELSE
        vCodigo := codigo;
      END IF;
    
      INSERT INTO tbl_servicios
      VALUES
        (linea,
         tipo,
         desBreve,
         desBreve,
         impuestos,
         1,
         vCodigo,
         tipo_codigo,
         pNo_cia,
         venta_IVI,
         pCod_cabys);
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al insertar el servicio, vuelva a intentarlo');
    WHEN dup_val_on_index THEN
      raise_application_error(-20100, 'Servicio existente');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al insertar el servicio ' ||
                              sqlerrm);
  END paInsertar;
  ----------------------------------------------------------------------------------

  PROCEDURE paEliminar(tipo    VARCHAR2,
                       codigo  VARCHAR2,
                       indice  NUMBER,
                       pNo_cia VARCHAR2) IS
  BEGIN
  
    UPDATE tbl_servicios
       SET SER_ESTADO = 0
     WHERE no_Cia = pNo_cia
       and SER_TIPO = tipo
       AND SER_INDICE = indice;
  
    COMMIT;
  EXCEPTION
    WHEN timeout_on_resource THEN
      raise_application_error(-20100,
                              'Ha excedido el tiempo de espera maximo al borrar el servicio, por favor intente de nuevo');
    WHEN OTHERS THEN
      raise_application_error(-20100,
                              'Error desconocido al eliminar el servicio ' ||
                              sqlerrm);
  END paEliminar;

END;

/

